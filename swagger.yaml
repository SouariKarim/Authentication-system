swagger: '2.0'
info:
  description: 'This is an authentication system using express and postgress in backend and react in the frontEnd  .'
  version: '1.0.0'
  title: 'Authentication system'
  termsOfService: ''
  contact:
    email: 'apiteam@swagger.io'
  license:
    name: ''
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: 'petstore.swagger.io'
basePath: '/v2'
tags:
  - name: 'Login'
    description: 'Authentication system'
    externalDocs:
      description: ''
      url: 'http://swagger.io'
  - name: 'validationPage'
    description: 'get the validation page'
  - name: 'validationEmail'
    description: 'validate a user and send an email '
  - name: 'generateToken'
    description: 'generate a token and send it to the user via email '

schemes:
  - 'https'
  - 'http'
paths:
  /login:
    post:
      tags:
        - 'Login'
      summary: 'Sign In an admin'
      description: 'Login the admin'
      operationId: ''
      consumes:
        - 'application/json'
        - 'application/xml'
      produces:
        - 'application/xml'
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'The login route and redirect to the validation page'
          required: true
          schema:
            $ref: '#/definitions/Admin'
      responses:
        '500':
          description: 'Invalid credentials'

  /validationPage:
    get:
      tags:
        - 'validationPage'
      summary: 'Get the validation page after login'
      description: 'Get the validation page after login and insert the data from inscription table in the user interface'
      operationId: ''
      produces:
        - 'application/json'

      responses:
        '200':
          description: 'successful operation'
          schema:
            $ref: '#/definitions/User'
        '500':
          description: 'server error'

  /validationEmail/{name}:
    post:
      tags:
        - 'validationEmail'
      summary: 'validate a user from the logged in admin and send him a validation email'
      description: ''
      operationId: ''
      produces:
        - 'application/json'
      parameters:
        - name: 'name'
          in: 'path'
          description: 'The name of the user that we want to validate and send a validation email '
          required: true
          type: 'string'
      responses:
        '200':
          description: 'successful operation'
          schema:
            $ref: '#/definitions/User'
        '500':
          description: 'server error'

  /generateToken/{name}:
    post:
      tags:
        - 'generateToken'
      summary: 'validate a user from the logged in admin and send him a validation email'
      description: ''
      operationId: ''
      produces:
        - 'application/json'
      parameters:
        - name: 'name'
          in: 'path'
          description: 'The name of the user that we want to validate and send a validation email '
          required: true
          type: 'string'
      responses:
        '200':
          description: 'successful operation'
          schema:
            $ref: '#/definitions/User'
        '500':
          description: 'server error'

definitions:
  Admin:
    type: 'object'
    properties:
      id:
        type: 'integer'

      username:
        type: 'string'
        format: 'date-time'
      password:
        type: 'integer'
        description: 'Order Status'

  User:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      name:
        type: 'string'
      lastname:
        type: 'string'
      emain:
        type: 'string'
      validated:
        type: 'boolean'
      bearer_token:
        type: 'string'
      validation_date:
        type: 'string'
